// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
let tg = window.Telegram?.WebApp || {
    // Fallback –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
    expand: () => {},
    close: () => {},
    showAlert: null,
    sendData: null,
    HapticFeedback: null,
    MainButton: {
        text: "",
        show: () => {},
        hide: () => {},
        onClick: () => {}
    },
    colorScheme: 'light'
};

// –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π Telegram
if (window.Telegram?.WebApp) {
    tg.expand();
}

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const data = {
    moscow: {
        motorcycles: [
            { id: 1, name: "Yamaha R1", price: 3000, location: "–¶–µ–Ω—Ç—Ä –ú–æ—Å–∫–≤—ã", emoji: "üèçÔ∏è" },
            { id: 2, name: "Honda CBR", price: 2500, location: "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å", emoji: "üèçÔ∏è" },
            { id: 3, name: "Kawasaki Ninja", price: 3500, location: "–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ", emoji: "üèçÔ∏è" }
        ],
        cars: [
            { id: 4, name: "BMW X5", price: 8000, location: "–ê—Ä–±–∞—Ç", emoji: "üöó" },
            { id: 5, name: "Mercedes C-Class", price: 7000, location: "–¢–≤–µ—Ä—Å–∫–∞—è", emoji: "üöó" },
            { id: 6, name: "Audi A4", price: 6500, location: "–ö—Ä–µ–º–ª—å", emoji: "üöó" }
        ],
        apartments: [
            { id: 7, name: "2-–∫–æ–º–Ω –∫–≤–∞—Ä—Ç–∏—Ä–∞", price: 5000, location: "–¶–µ–Ω—Ç—Ä, —É –º–µ—Ç—Ä–æ", emoji: "üè†" },
            { id: 8, name: "–°—Ç—É–¥–∏—è", price: 3000, location: "–ö—Ä–∞—Å–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞", emoji: "üè†" },
            { id: 9, name: "3-–∫–æ–º–Ω –∫–≤–∞—Ä—Ç–∏—Ä–∞", price: 8000, location: "–ü–∞—Ä–∫ –ö—É–ª—å—Ç—É—Ä—ã", emoji: "üè†" }
        ]
    },
    spb: {
        motorcycles: [
            { id: 10, name: "Ducati Monster", price: 4000, location: "–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç", emoji: "üèçÔ∏è" },
            { id: 11, name: "Harley Davidson", price: 5000, location: "–î–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å", emoji: "üèçÔ∏è" }
        ],
        cars: [
            { id: 12, name: "Tesla Model 3", price: 9000, location: "–≠—Ä–º–∏—Ç–∞–∂", emoji: "üöó" },
            { id: 13, name: "Volvo XC90", price: 7500, location: "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤–∫–∞", emoji: "üöó" }
        ],
        apartments: [
            { id: 14, name: "–õ–æ—Ñ—Ç", price: 6000, location: "–í–∞—Å–∏–ª—å–µ–≤—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤", emoji: "üè†" },
            { id: 15, name: "–ü–µ–Ω—Ç—Ö–∞—É—Å", price: 12000, location: "–¶–µ–Ω—Ç—Ä –°–ü–±", emoji: "üè†" }
        ]
    },
    paris: {
        motorcycles: [
            { id: 16, name: "Vespa Primavera", price: 2000, location: "Champs-√âlys√©es", emoji: "üèçÔ∏è" },
            { id: 17, name: "BMW R1250", price: 4500, location: "Louvre", emoji: "üèçÔ∏è" }
        ],
        cars: [
            { id: 18, name: "Peugeot 508", price: 5500, location: "Eiffel Tower", emoji: "üöó" },
            { id: 19, name: "Renault Megane", price: 4000, location: "Notre-Dame", emoji: "üöó" }
        ],
        apartments: [
            { id: 20, name: "Appartement 2 chambres", price: 8000, location: "Montmartre", emoji: "üè†" },
            { id: 21, name: "Studio Parisien", price: 5000, location: "Le Marais", emoji: "üè†" }
        ]
    },
    london: {
        motorcycles: [
            { id: 22, name: "Triumph Street", price: 3500, location: "Big Ben", emoji: "üèçÔ∏è" },
            { id: 23, name: "Royal Enfield", price: 2800, location: "Tower Bridge", emoji: "üèçÔ∏è" }
        ],
        cars: [
            { id: 24, name: "Mini Cooper", price: 4500, location: "Oxford Street", emoji: "üöó" },
            { id: 25, name: "Jaguar F-Type", price: 12000, location: "Buckingham Palace", emoji: "üöó" }
        ],
        apartments: [
            { id: 26, name: "London Flat", price: 10000, location: "Camden", emoji: "üè†" },
            { id: 27, name: "Cozy Studio", price: 6000, location: "Covent Garden", emoji: "üè†" }
        ]
    },
    tokyo: {
        motorcycles: [
            { id: 28, name: "Honda Grom", price: 2200, location: "Shibuya", emoji: "üèçÔ∏è" },
            { id: 29, name: "Suzuki GSX", price: 3800, location: "Akihabara", emoji: "üèçÔ∏è" }
        ],
        cars: [
            { id: 30, name: "Toyota Prius", price: 4000, location: "Ginza", emoji: "üöó" },
            { id: 31, name: "Nissan GT-R", price: 15000, location: "Harajuku", emoji: "üöó" }
        ],
        apartments: [
            { id: 32, name: "Tokyo Apartment", price: 7000, location: "Shinjuku", emoji: "üè†" },
            { id: 33, name: "Capsule Home", price: 3500, location: "Roppongi", emoji: "üè†" }
        ]
    },
    nyc: {
        motorcycles: [
            { id: 34, name: "Indian Scout", price: 4200, location: "Times Square", emoji: "üèçÔ∏è" },
            { id: 35, name: "Zero SR/F", price: 3700, location: "Central Park", emoji: "üèçÔ∏è" }
        ],
        cars: [
            { id: 36, name: "Ford Mustang", price: 8500, location: "Manhattan", emoji: "üöó" },
            { id: 37, name: "Chevrolet Camaro", price: 9000, location: "Brooklyn", emoji: "üöó" }
        ],
        apartments: [
            { id: 38, name: "NYC Loft", price: 15000, location: "SoHo", emoji: "üè†" },
            { id: 39, name: "Studio Manhattan", price: 8000, location: "Upper East Side", emoji: "üè†" }
        ]
    }
};

let currentCategory = 'motorcycles';
let cart = [];

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function switchCategory(category) {
    currentCategory = category;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');
    
    loadItems();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function loadItems() {
    const city = document.getElementById('city').value;
    const grid = document.getElementById('items-grid');
    
    if (!city) {
        grid.innerHTML = '<div class="placeholder">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</div>';
        return;
    }
    
    const items = data[city][currentCategory];
    
    grid.innerHTML = items.map(item => `
        <div class="item-card">
            <div class="item-image">${item.emoji}</div>
            <div class="item-title">${item.name}</div>
            <div class="item-price">${item.price} ‚ÇΩ/–¥–µ–Ω—å</div>
            <div class="item-location">üìç ${item.location}</div>
            <button class="add-btn" onclick="addToCart(${item.id})">–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É</button>
        </div>
    `).join('');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
function addToCart(itemId) {
    const city = document.getElementById('city').value;
    let item = null;
    
    // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    for (const category in data[city]) {
        const found = data[city][category].find(i => i.id === itemId);
        if (found) {
            item = found;
            break;
        }
    }
    
    if (item && !cart.find(i => i.id === itemId)) {
        cart.push(item);
        updateCart();
        
        // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        if (tg.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('medium');
        }
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
function removeFromCart(itemId) {
    cart = cart.filter(item => item.id !== itemId);
    updateCart();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
function updateCart() {
    const cartElement = document.getElementById('cart');
    const cartItems = document.getElementById('cart-items');
    const total = document.getElementById('total');
    
    if (cart.length === 0) {
        cartElement.classList.add('hidden');
        return;
    }
    
    cartElement.classList.remove('hidden');
    
    cartItems.innerHTML = cart.map(item => `
        <div class="cart-item">
            <div>
                <div>${item.emoji} ${item.name}</div>
                <div style="font-size: 12px; color: #666;">${item.location}</div>
            </div>
            <div style="text-align: right;">
                <div>${item.price} ‚ÇΩ</div>
                <button class="remove-btn" onclick="removeFromCart(${item.id})">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        </div>
    `).join('');
    
    const totalPrice = cart.reduce((sum, item) => sum + item.price, 0);
    total.textContent = totalPrice;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–µ–Ω–¥—ã
function processRent() {
    if (cart.length === 0) return;
    
    const totalPrice = cart.reduce((sum, item) => sum + item.price, 0);
    const itemsList = cart.map(item => `${item.emoji} ${item.name} (${item.price}‚ÇΩ)`).join('\n');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const orderText = `üéâ –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\nüìã –ó–∞–∫–∞–∑:\n${itemsList}\n\nüí∞ –ò—Ç–æ–≥–æ: ${totalPrice} ‚ÇΩ\n\nüë§ –û—Ç: @${tg.initDataUnsafe?.user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç—É (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Telegram)
    if (window.Telegram?.WebApp?.sendData) {
        tg.sendData(JSON.stringify({
            type: 'order',
            cart: cart,
            total: totalPrice,
            user: tg.initDataUnsafe?.user,
            timestamp: new Date().toISOString(),
            orderText: orderText
        }));
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        tg.showAlert('‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            tg.close();
        }, 2000);
        
    } else {
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        const message = `üéâ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\nüìã –í–∞—à –∑–∞–∫–∞–∑:\n${itemsList}\n\nüí∞ –ò—Ç–æ–≥–æ: ${totalPrice} ‚ÇΩ\n\nüìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!`;
        alert(message);
        console.log('üì± –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω:', {
            cart: cart,
            total: totalPrice,
            timestamp: new Date().toISOString()
        });
    }
    
    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cart = [];
    updateCart();
    
    // –í–∏–±—Ä–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
    if (tg.HapticFeedback) {
        tg.HapticFeedback.notificationOccurred('success');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –≤ Telegram
    const isInTelegram = window.Telegram?.WebApp;
    
    if (isInTelegram) {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã Telegram
        if (tg.colorScheme === 'dark') {
            document.body.style.background = '#17212b';
            document.body.style.color = '#ffffff';
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        tg.MainButton.text = "–ó–∞–∫—Ä—ã—Ç—å";
        tg.MainButton.show();
        tg.MainButton.onClick(() => tg.close());
        
        console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else {
        console.log('üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    }
});
